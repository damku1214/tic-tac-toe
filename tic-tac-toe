import java.util.Scanner;

// Press Shift twice to open the Search Everywhere dialog and type `show whitespaces`,
// then press Enter. You can now see whitespace characters in your code.public class TicTacToe {
public class TicTacToe {
    public static void main(String[] args) {

        String[] board = new String[9];
        board[0] = " ";
        board[1] = " ";
        board[2] = " ";
        board[3] = " ";
        board[4] = " ";
        board[5] = " ";
        board[6] = " ";
        board[7] = " ";
        board[8] = " ";

        int player = 1;
        int startingpoint = 0;
        int ended = 0;

        turn(player, board, startingpoint, ended);
    }
    public static void turn(int player, String[] board, int startingpoint, int ended) {
        System.out.println("It's player " + player + "'s turn. What square do you want to mark on? (1~9)");
        boarddisplay(board);
        input(board, player, startingpoint, ended);

    }
    public static void boarddisplay(String[] board) {
        System.out.println("[" + board[0] + "]" + "[" + board[1] + "]" + "[" + board[2] + "]");
        System.out.println("[" + board[3] + "]" + "[" + board[4] + "]" + "[" + board[5] + "]");
        System.out.println("[" + board[6] + "]" + "[" + board[7] + "]" + "[" + board[8] + "]");
    }
    public static void input(String[] board, int player, int startingpoint, int ended) {
        Scanner inputscanner = new Scanner(System.in);
        int boardnumplayerinput = inputscanner.nextInt();

        int boardnum = boardnumplayerinput - 1;
        if (boardnum < 9) {
            if (boardnum == -1) {
                boardnumplayerinputnotmatching(board, player, startingpoint, ended);
            } else {
                checkifspaceoccupied(board, boardnum, player, startingpoint, ended, inputscanner);
            }
        } else {
            boardnumplayerinputnotmatching(board, player, startingpoint, ended);
        }
    }
    public static void checkifspaceoccupied(String[] board, int boardnum, int player, int startingpoint, int ended, Scanner inputscanner) {
        if (!board[boardnum].equals(" ")) {
            System.out.println("That space is already occupied! Choose another one.");
            input(board, player, startingpoint, ended);
        } else {
            playeraction(player, boardnum, board, startingpoint, ended, inputscanner);
        }
    }
    public static void boardnumplayerinputnotmatching(String[] board, int player, int startingpoint, int ended) {
        System.out.println("That is not a number from 1 to 9. Choose again.");
        input(board, player, startingpoint, ended);
    }
    public static void playeraction(int player, int boardnum, String[] board, int startingpoint, int ended, Scanner inputscanner) {
        switch (player) {
            case (1) -> {
                board[boardnum] = "O";
                checkifcomplete(startingpoint, board, player, ended, inputscanner);
            }
            case (2) -> {
                board[boardnum] = "X";
                checkifcomplete(startingpoint, board, player, ended, inputscanner);
            }
        }
    }
    public static void checkifcomplete(int startingpoint, String[] board, int player, int ended, Scanner inputscanner) {
        checkifrowcomplete(startingpoint = 0, board, ended, player, inputscanner);
    }
    public static void checkifrowcomplete(int startingpoint, String[] board, int ended, int player, Scanner inputscanner) {
        if (board[startingpoint].equals(board[startingpoint + 1])) {
            if (board[startingpoint + 1].equals(board[startingpoint + 2])) {
                if (!board[startingpoint].equals(" ")) {
                    ended = 1;
                }
            }
        }
        startingpoint = 3;
        if (board[startingpoint].equals(board[startingpoint + 1])) {
            if (board[startingpoint + 1].equals(board[startingpoint + 2])) {
                if (!board[startingpoint].equals(" ")) {
                    ended = 1;
                }
            }
        }
        startingpoint = 6;
        if (board[startingpoint].equals(board[startingpoint + 1])) {
            if (board[startingpoint + 1].equals(board[startingpoint + 2])) {
                if (!board[startingpoint].equals(" ")) {
                    ended = 1;
                }
            }
        }
        checkifcolumncomplete(startingpoint = 0, board, ended, player, inputscanner);
    }
    public static void checkifcolumncomplete(int startingpoint, String[] board, int ended, int player, Scanner inputscanner) {
        if (board[startingpoint].equals(board[startingpoint + 3])) {
            if (board[startingpoint + 3].equals(board[startingpoint + 6])) {
                if (!board[startingpoint].equals(" ")) {
                    ended = 1;
                }
            }
        }
        startingpoint = 1;
        if (board[startingpoint].equals(board[startingpoint + 3])) {
            if (board[startingpoint + 3].equals(board[startingpoint + 6])) {
                if (!board[startingpoint].equals(" ")) {
                    ended = 1;
                }
            }
        }
        startingpoint = 2;
        if (board[startingpoint].equals(board[startingpoint + 3])) {
            if (board[startingpoint + 3].equals(board[startingpoint + 6])) {
                if (!board[startingpoint].equals(" ")) {
                    ended = 1;
                }
            }
        }
        checkifdiag1complete(startingpoint = 0, board, ended, player, inputscanner);
    }
    public static void checkifdiag1complete(int startingpoint, String[] board, int ended, int player, Scanner inputscanner) {
        if (board[startingpoint].equals(board[startingpoint + 4])) {
            if (board[startingpoint + 4].equals(board[startingpoint + 8])) {
                if (!board[startingpoint].equals(" ")) {
                    ended = 1;
                }
            }
        }
        checkifdiag2complete(startingpoint = 2, board, ended, player, inputscanner);
    }
    public static void checkifdiag2complete(int startingpoint, String[] board, int ended, int player, Scanner inputscanner) {
        if (board[startingpoint].equals(board[startingpoint + 2])) {
            if (board[startingpoint + 2].equals(board[startingpoint + 4])) {
                if (!board[startingpoint].equals(" ")) {
                    ended = 1;
                }
            }
        }
        checkifend(ended, player, board, startingpoint, inputscanner);
    }
    public static void end(int player, String[] board, Scanner inputscanner) {
        boarddisplay(board);
        System.out.println("Congratulations! Player " + player + " won! I hope you had fun!");
        inputscanner.close();
    }
    public static void endtie(String[] board, Scanner inputscanner) {
        boarddisplay(board);
        System.out.println("It's a tie! I hope you had fun!");
        inputscanner.close();
    }
    public static void checkplayernumcontinue(int player, String[] board, int startingpoint, int ended) {
        switch (player) {
            case (1) -> turn(player = 2, board, startingpoint, ended);
            case (2) -> turn(player = 1, board, startingpoint, ended);
        }
    }
    public static void checkifend(int ended, int player, String[] board, int startingpoint, Scanner inputscanner) {
        if (ended == 1) {
            end(player, board, inputscanner);
        } else if (!board[0].equals(" ") && !board[1].equals(" ") && !board[2].equals(" ") && !board[3].equals(" ") && !board[4].equals(" ") && !board[5].equals(" ") && !board[6].equals(" ") && !board[7].equals(" ") && !board[8].equals(" ")) {
            endtie(board, inputscanner);
        } else {
            checkplayernumcontinue(player, board, startingpoint, ended);
        }
    }
}
